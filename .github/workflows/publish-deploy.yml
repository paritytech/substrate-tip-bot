name: Publish and deploy

on:
  push:
    branches:
      - master
    tags:
      - v*
      - stg-v*

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

#to use reusable workflow
permissions:
  id-token: write
  contents: read

env:
  APP: "substrate-tip-bot"

jobs:
  set-variables:
    name: Set variables
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Define version
        id: version
        run: |
          export COMMIT_SHA=${{ github.sha }}
          export COMMIT_SHA_SHORT=${COMMIT_SHA:0:8}
          export REF_NAME=${{ github.ref_name }}
          export REF_SLUG=${REF_NAME//\//_}
          echo "short sha: ${COMMIT_SHA_SHORT}  slug: ${REF_SLUG}"
          if [[ ${REF_SLUG} == "master" ]]
          then
            export VERSION=${REF_SLUG}-${COMMIT_SHA_SHORT}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          else
            export VERSION=${REF_SLUG}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          fi
          echo "set VERSION=${VERSION}"
  build_push_docker:
    name: Build docker image
    runs-on: ubuntu-latest
    environment: master_n_tags
    needs: [set-variables]
    env:
      VERSION: ${{ needs.set-variables.outputs.VERSION }}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            docker.io/paritytech/substrate-tip-bot:${{ env.VERSION }}

  deploy-stg:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: [set-variables, build_push_docker]
    environment: parity-stg
    env:
      VERSION: ${{ needs.set-variables.outputs.VERSION }}
      ARGOCD_SERVER: "argocd-stg.teleport.parity.io"
    steps:
      - name: Deploy to ArgoCD
        uses: paritytech/argocd-deployment-action@main
        with:
          environment: "parity-stg"
          tag: "${{ env.VERSION }}"
          app_name: "${{ env.APP }}"
          app_packages: "common"
          argocd_server: ${{ env.ARGOCD_SERVER }}
          teleport_token: ${{ env.APP }}
          teleport_app_name: "argocd-stg"
          argocd_auth_token: ${{ secrets.ARGOCD_AUTH_TOKEN }}

  deploy-prod:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [set-variables, deploy-stg]
    environment: parity-prod
    env:
      VERSION: ${{ needs.set-variables.outputs.VERSION }}
      ARGOCD_SERVER: "argocd-prod.teleport.parity.io"
    steps:
      - name: Deploy to ArgoCD
        uses: paritytech/argocd-deployment-action@main
        with:
          environment: "parity-prod"
          tag: "${{ env.VERSION }}"
          app_name: "${{ env.APP }}"
          app_packages: "common"
          argocd_server: ${{ env.ARGOCD_SERVER }}
          teleport_token: ${{ env.APP }}
          teleport_app_name: "argocd-prod"
          argocd_auth_token: ${{ secrets.ARGOCD_AUTH_TOKEN }}
